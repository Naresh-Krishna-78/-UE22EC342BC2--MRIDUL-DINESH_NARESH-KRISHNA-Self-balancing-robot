<?xml version="1.0"?>
<robot xmlns:xacro="http://www.ros.org/wiki/xacro" name="self_balancing_robot">

    <xacro:property name="PI" value="3.1415926535897931"/>
    <xacro:property name="chassis_mass" value="1.0"/>
    <xacro:property name="chassis_length" value="0.1"/>
    <xacro:property name="chassis_width" value="0.15"/>
    <xacro:property name="chassis_height" value="0.1"/>
    <xacro:property name="wheel_mass" value="0.1"/>
    <xacro:property name="wheel_radius" value="0.05"/>
    <xacro:property name="wheel_thickness" value="0.02"/>
    <xacro:property name="wheel_separation" value="${chassis_width + wheel_thickness}"/> <xacro:property name="imu_mass" value="0.01"/>
    <xacro:property name="imu_size" value="0.02"/>

    <xacro:macro name="box_inertia" params="m x y z">
        <inertial>
            <mass value="${m}"/>
            <inertia ixx="${(m/12) * (y*y + z*z)}" ixy="0.0" ixz="0.0"
                     iyy="${(m/12) * (x*x + z*z)}" iyz="0.0"
                     izz="${(m/12) * (x*x + y*y)}" />
        </inertial>
    </xacro:macro>

    <xacro:macro name="cylinder_inertia" params="m r h">
        <inertial>
            <mass value="${m}"/>
            <inertia ixx="${(m/12) * (3*r*r + h*h)}" ixy="0.0" ixz="0.0"
                     iyy="${(m/12) * (3*r*r + h*h)}" iyz="0.0"
                     izz="${(m/2) * (r*r)}" />
        </inertial>
    </xacro:macro>

    <link name="base_link">
        <visual>
            <origin xyz="0 0 ${wheel_radius}" rpy="0 0 0"/>
            <geometry>
                <box size="${chassis_length} ${chassis_width} ${chassis_height}"/>
            </geometry>
            <material name="blue"/>
        </visual>
        <collision>
             <origin xyz="0 0 ${wheel_radius}" rpy="0 0 0"/>
            <geometry>
                <box size="${chassis_length} ${chassis_width} ${chassis_height}"/>
            </geometry>
        </collision>
        <xacro:box_inertia m="${chassis_mass}" x="${chassis_length}" y="${chassis_width}" z="${chassis_height}"/>
    </link>

    <link name="imu_link"/>
    <joint name="imu_joint" type="fixed">
        <parent link="base_link"/>
        <child link="imu_link"/>
        <origin xyz="0 0 ${wheel_radius + chassis_height/2}" rpy="0 0 0"/>
    </joint>

    <xacro:macro name="wheel" params="prefix side_y">
        <link name="${prefix}_wheel_link">
            <visual>
                <origin xyz="0 0 0" rpy="${PI/2} 0 0"/>
                <geometry>
                    <cylinder radius="${wheel_radius}" length="${wheel_thickness}"/>
                </geometry>
                 <material name="black"/>
            </visual>
            <collision>
                 <origin xyz="0 0 0" rpy="${PI/2} 0 0"/>
                 <geometry>
                    <cylinder radius="${wheel_radius}" length="${wheel_thickness}"/>
                </geometry>
            </collision>
            <xacro:cylinder_inertia m="${wheel_mass}" r="${wheel_radius}" h="${wheel_thickness}"/>
        </link>

        <joint name="${prefix}_wheel_joint" type="continuous">
            <parent link="base_link"/>
            <child link="${prefix}_wheel_link"/>
             <origin xyz="0 ${side_y * wheel_separation / 2.0} ${wheel_radius}" rpy="0 0 0"/>
            <axis xyz="0 1 0"/> </joint>
    </xacro:macro>

    <xacro:wheel prefix="left" side_y="1"/>
    <xacro:wheel prefix="right" side_y="-1"/>

    <material name="blue">
        <color rgba="0.2 0.2 1.0 1.0"/>
    </material>
     <material name="black">
        <color rgba="0.1 0.1 0.1 1.0"/>
     </material>
     <material name="red">
         <color rgba="1.0 0.1 0.1 1.0"/>
      </material>

    <gazebo>
        
      <plugin name='gz::sim::systems::Sensors' filename='gz-sim-sensors-system'>
            <sensors>
                <sensor name='imu_sensor' type='imu'>
                    <topic>imu_sensor_raw</topic> <update_rate>100</update_rate>
                     <imu>
                        ... angular_velocity and linear_acceleration noise ...
                     </imu>
                    <always_on>1</always_on>
                    <visualize>false</visualize>
                    <pose relative_to="imu_link">0 0 0 0 0 0</pose>

                    <plugin filename="gz-sim-imu-system" name="gz::sim::systems::Imu">
                        <ros>
                            <namespace>/</namespace>
                            <topic>imu</topic>
                            </ros>
                        <initial_orientation_as_reference>false</initial_orientation_as_reference>
                    </plugin>
                    </sensor>
            </sensors>
        </plugin>


        <plugin filename="gz-sim-diff-drive-system" name="gz::sim::systems::DiffDrive">
            <left_joint>left_wheel_joint</left_joint>
            <right_joint>right_wheel_joint</right_joint>
            <wheel_separation>${wheel_separation}</wheel_separation>
            <wheel_radius>${wheel_radius}</wheel_radius>
            <ros>
                 <namespace>/</namespace>
                 <remapping>cmd_vel:=cmd_vel</remapping>
                 <remapping>odom:=odom</remapping>
                 <remapping>tf:=tf</remapping>
            </ros>
             <odom_publish_frequency>50</odom_publish_frequency>
             <frame_id>odom</frame_id>
            <child_frame_id>base_link</child_frame_id>
        </plugin>

    </gazebo>

    <gazebo reference="base_link">
        <material>Gazebo/Blue</material>
    </gazebo>
     <gazebo reference="left_wheel_link">
        <material>Gazebo/Black</material>
        <mu1>0.8</mu1> <mu2>0.8</mu2> <kp>1000000.0</kp> <kd>1.0</kd> </gazebo>
    <gazebo reference="right_wheel_link">
        <material>Gazebo/Black</material>
         <mu1>0.8</mu1>
        <mu2>0.8</mu2>
         <kp>1000000.0</kp>
        <kd>1.0</kd>
    </gazebo>

</robot>
